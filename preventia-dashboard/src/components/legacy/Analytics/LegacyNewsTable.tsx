import React, { useState } from 'react';

interface NewsItem {
  id: string;
  title: string;
  country: string;
  language: string;
  date: string;
  topic: string;
  sentiment: string;
  url: string;
  source: string;
  summary?: string;
}

interface FilterState {
  country: string;
  language: string;
  date: string;
  topic: string;
  keyword: string;
}

interface LegacyNewsTableProps {
  data: NewsItem[];
  loading?: boolean;
  onNewsSelect: (news: NewsItem) => void;
  filters: FilterState;
}

const LegacyNewsTable: React.FC<LegacyNewsTableProps> = ({
  data,
  loading = false,
  onNewsSelect,
  filters,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Handle different empty states
  const hasRealData = data && Array.isArray(data) && data.length > 0;
  const hasValidData = hasRealData && data.some(item => item.title && item.id);

  if (loading) {
    return (
      <div className="legacy-news-table">
        <div className="legacy-table-header">
          <h3>Tabla de Noticias</h3>
          <p>Cargando datos...</p>
        </div>
        <div style={{ height: '400px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <div className="legacy-loading-spinner">
            <i className="fas fa-spinner fa-spin" style={{ fontSize: '24px', color: 'var(--primary-blue)' }}></i>
            <p style={{ marginTop: '10px', color: 'var(--text-secondary)' }}>Cargando noticias...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!hasRealData) {
    return (
      <div className="legacy-news-table">
        <div className="legacy-table-header">
          <h3>Noticias Filtradas</h3>
          <p>0 resultados encontrados</p>
        </div>
        <div style={{ height: '400px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
          <i className="fas fa-newspaper" style={{ fontSize: '48px', color: '#6b7280', marginBottom: '20px' }}></i>
          <p style={{ color: 'var(--text-secondary)', textAlign: 'center' }}>
            No se pudieron obtener los datos de noticias.<br />
            Verifique la conexi√≥n con la API o los filtros aplicados.
          </p>
        </div>
      </div>
    );
  }

  if (!hasValidData) {
    return (
      <div className="legacy-news-table">
        <div className="legacy-table-header">
          <h3>Noticias Filtradas</h3>
          <p>Datos incompletos</p>
        </div>
        <div style={{ height: '400px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
          <i className="fas fa-exclamation-triangle" style={{ fontSize: '48px', color: '#f59e0b', marginBottom: '20px' }}></i>
          <p style={{ color: 'var(--text-secondary)', textAlign: 'center' }}>
            Los datos de noticias est√°n incompletos.<br />
            Faltan campos obligatorios como t√≠tulo o identificador.
          </p>
        </div>
      </div>
    );
  }

  const newsData = data;

  // Filter data based on filters - with safe null checks
  const filteredData = newsData.filter((item) => {
    // Safe keyword filtering
    if (filters.keyword) {
      const keyword = filters.keyword.toLowerCase();
      const title = (item.title || '').toLowerCase();
      const source = (item.source || '').toLowerCase();

      if (!title.includes(keyword) && !source.includes(keyword)) {
        return false;
      }
    }

    // Safe field filtering with null checks
    if (filters.country && (item.country || '') !== filters.country) return false;
    if (filters.language && (item.language || '') !== filters.language) return false;
    if (filters.date && (item.date || '') !== filters.date) return false;
    if (filters.topic && (item.topic || '') !== filters.topic) return false;

    return true;
  });

  // Pagination
  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentData = filteredData.slice(startIndex, endIndex);

  const getCountryFlag = (country: string) => {
    if (!country) return 'üåç';

    const flags: Record<string, string> = {
      US: 'üá∫üá∏', USA: 'üá∫üá∏', 'United States': 'üá∫üá∏',
      UK: 'üá¨üáß', GB: 'üá¨üáß', 'United Kingdom': 'üá¨üáß',
      DE: 'üá©üá™', Germany: 'üá©üá™', Alemania: 'üá©üá™',
      CO: 'üá®üá¥', Colombia: 'üá®üá¥',
      ES: 'üá™üá∏', Spain: 'üá™üá∏', Espa√±a: 'üá™üá∏',
      MX: 'üá≤üáΩ', Mexico: 'üá≤üáΩ', M√©xico: 'üá≤üáΩ',
      Unknown: 'üåç', unknown: 'üåç',
    };
    return flags[country] || flags[country.toUpperCase()] || 'üåç';
  };

  const getCountryName = (country: string) => {
    if (!country) return 'No especificado';

    const names: Record<string, string> = {
      US: 'Estados Unidos', USA: 'Estados Unidos', 'United States': 'Estados Unidos',
      UK: 'Reino Unido', GB: 'Reino Unido', 'United Kingdom': 'Reino Unido',
      DE: 'Alemania', Germany: 'Alemania',
      CO: 'Colombia', Colombia: 'Colombia',
      ES: 'Espa√±a', Spain: 'Espa√±a',
      MX: 'M√©xico', Mexico: 'M√©xico',
      Unknown: 'Desconocido', unknown: 'Desconocido',
    };
    return names[country] || names[country.toUpperCase()] || country;
  };

  const getLanguageName = (language: string) => {
    if (!language) return 'No especificado';

    const languages: Record<string, string> = {
      en: 'Ingl√©s', english: 'Ingl√©s', English: 'Ingl√©s',
      es: 'Espa√±ol', spanish: 'Espa√±ol', Spanish: 'Espa√±ol',
      de: 'Alem√°n', german: 'Alem√°n', German: 'Alem√°n',
      fr: 'Franc√©s', french: 'Franc√©s', French: 'Franc√©s',
      it: 'Italiano', italian: 'Italiano', Italian: 'Italiano',
      pt: 'Portugu√©s', portuguese: 'Portugu√©s', Portuguese: 'Portugu√©s',
    };
    return languages[language] || languages[language.toLowerCase()] || language;
  };

  const getTopicLabel = (topic: string) => {
    if (!topic) return 'Sin categor√≠a';

    const topics: Record<string, string> = {
      prevention: 'Prevenci√≥n', Prevenci√≥n: 'Prevenci√≥n',
      treatment: 'Tratamiento', Tratamiento: 'Tratamiento',
      diagnosis: 'Diagn√≥stico', Diagn√≥stico: 'Diagn√≥stico',
      testimonials: 'Testimonios', Testimonios: 'Testimonios',
      public_policy: 'Pol√≠tica P√∫blica', 'Pol√≠tica P√∫blica': 'Pol√≠tica P√∫blica',
      research: 'Investigaci√≥n', Investigaci√≥n: 'Investigaci√≥n',
      surgery: 'Cirug√≠a', Cirug√≠a: 'Cirug√≠a',
      screening: 'Detecci√≥n', Detecci√≥n: 'Detecci√≥n',
      support: 'Apoyo', Apoyo: 'Apoyo',
      genetics: 'Gen√©tica', Gen√©tica: 'Gen√©tica',
      lifestyle: 'Estilo de vida', 'Estilo de vida': 'Estilo de vida',
      policy: 'Pol√≠tica', Pol√≠tica: 'Pol√≠tica',
      general: 'General', General: 'General',
      awareness: 'Concienciaci√≥n', Concienciaci√≥n: 'Concienciaci√≥n',
      nutrition: 'Nutrici√≥n', Nutrici√≥n: 'Nutrici√≥n',
      rehabilitation: 'Rehabilitaci√≥n', Rehabilitaci√≥n: 'Rehabilitaci√≥n',
      other: 'Otros', Otros: 'Otros',
    };
    return topics[topic] || topics[topic.toLowerCase()] || topic;
  };

  const getSentimentLabel = (sentiment: string) => {
    if (!sentiment) return { label: 'Sin an√°lisis', color: '#9ca3af', icon: 'fa-question' };

    const sentiments: Record<string, { label: string; color: string; icon: string }> = {
      positive: { label: 'Positivo', color: '#28a745', icon: 'fa-smile' },
      Positivo: { label: 'Positivo', color: '#28a745', icon: 'fa-smile' },
      negative: { label: 'Negativo', color: '#dc3545', icon: 'fa-frown' },
      Negativo: { label: 'Negativo', color: '#dc3545', icon: 'fa-frown' },
      neutral: { label: 'Neutro', color: '#6c757d', icon: 'fa-meh' },
      Neutro: { label: 'Neutro', color: '#6c757d', icon: 'fa-meh' },
    };
    return sentiments[sentiment] || sentiments[sentiment.toLowerCase()] ||
           { label: sentiment, color: '#6c757d', icon: 'fa-meh' };
  };

  // Check if we have any data after filtering
  if (filteredData.length === 0 && hasRealData) {
    return (
      <div className="legacy-news-table">
        <div className="legacy-table-header">
          <h3>Noticias Filtradas</h3>
          <p>0 resultados encontrados</p>
        </div>
        <div style={{ height: '400px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
          <i className="fas fa-filter" style={{ fontSize: '48px', color: '#6b7280', marginBottom: '20px' }}></i>
          <p style={{ color: 'var(--text-secondary)', textAlign: 'center' }}>
            No se encontraron noticias que coincidan con los filtros aplicados.<br />
            Intente ajustar los criterios de b√∫squeda.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="legacy-news-table">
      <div className="legacy-table-header">
        <h3>Noticias Filtradas</h3>
        <p>{filteredData.length} resultados encontrados</p>

      </div>

      <div className="legacy-table-container">
        <table className="legacy-table">
          <thead>
            <tr>
              <th>T√≠tulo</th>
              <th>Pa√≠s</th>
              <th>Idioma</th>
              <th>Fecha</th>
              <th>Tema</th>
              <th>Tono</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {currentData.map((item) => {
              const sentimentInfo = getSentimentLabel(item.sentiment);

              return (
                <tr key={item.id || `news-${Math.random()}`}>
                  <td>
                    {item.url ? (
                      <a
                        href={item.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="legacy-news-link"
                        title="Abrir art√≠culo original"
                      >
                        {item.title || 'T√≠tulo no disponible'}
                      </a>
                    ) : (
                      <span className="legacy-news-link" style={{ color: 'var(--text-secondary)' }}>
                        {item.title || 'T√≠tulo no disponible'}
                      </span>
                    )}
                    <div className="legacy-news-source">
                      {item.source || 'Fuente no especificada'}
                    </div>
                  </td>
                  <td>
                    <span className="legacy-country">
                      {getCountryFlag(item.country)} {getCountryName(item.country)}
                    </span>
                  </td>
                  <td>
                    <span className="legacy-language">
                      {getLanguageName(item.language)}
                    </span>
                  </td>
                  <td>
                    {item.date ? (
                      new Date(item.date).toLocaleDateString('es-ES')
                    ) : (
                      <span style={{ color: 'var(--text-secondary)', fontStyle: 'italic' }}>
                        Sin fecha
                      </span>
                    )}
                  </td>
                  <td>
                    <span className="legacy-topic-badge">
                      {getTopicLabel(item.topic)}
                    </span>
                  </td>
                  <td>
                    <span
                      className="legacy-sentiment-badge"
                      style={{ color: sentimentInfo.color }}
                    >
                      <i className={`fas ${sentimentInfo.icon}`}></i>
                      {sentimentInfo.label}
                    </span>
                  </td>
                  <td>
                    <button
                      className="legacy-btn-small legacy-btn-primary"
                      onClick={() => onNewsSelect(item)}
                      title="Ver resumen automatizado"
                    >
                      <i className="fas fa-eye"></i>
                      Ver resumen
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="legacy-pagination">
          <button
            className="legacy-btn-secondary"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(currentPage - 1)}
          >
            <i className="fas fa-chevron-left"></i>
            Anterior
          </button>

          <span className="legacy-pagination-info">
            P√°gina {currentPage} de {totalPages}
          </span>

          <button
            className="legacy-btn-secondary"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(currentPage + 1)}
          >
            Siguiente
            <i className="fas fa-chevron-right"></i>
          </button>
        </div>
      )}
    </div>
  );
};

export default LegacyNewsTable;
