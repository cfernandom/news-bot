"""
PDF export functionality.
Handles PDF report generation and download endpoints.
"""

import io
from datetime import datetime
from typing import Any, Dict, Optional

from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession

from services.data.database.connection import get_db_session

from .shared import get_filtered_articles, track_export

router = APIRouter()


class PDFExportRequest(BaseModel):
    filters: Dict[str, Any] = {}
    include_ai_summaries: bool = True


@router.post("/report")
async def generate_pdf_report(
    request: PDFExportRequest,
    db: AsyncSession = Depends(get_db_session),
):
    """
    Generate comprehensive PDF report with filtered articles.

    Creates a professional PDF report including:
    - Executive summary
    - Article listings with metadata
    - Charts and visualizations
    - Statistical analysis
    """
    try:
        # Extract filters from request body
        filters = request.filters

        # Get filtered articles using filters from request body
        articles = await get_filtered_articles(
            db,
            filters.get("search"),
            filters.get("start_date"),
            filters.get("end_date"),
            filters.get("source_id"),
            filters.get("sentiment"),
            filters.get("country"),
            filters.get("language"),
            filters.get("min_word_count"),
            filters.get("max_word_count"),
            filters.get("limit", 1000),
        )

        if not articles:
            raise HTTPException(
                status_code=404, detail="No articles found for report generation"
            )

        # Generate PDF content (simplified HTML-based approach)
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>PreventIA News Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ text-align: center; color: #2c3e50; }}
                .summary {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                .article {{ margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; }}
                .metadata {{ color: #7f8c8d; font-size: 12px; }}
                .stats {{ display: flex; justify-content: space-around; margin: 20px 0; }}
                .stat-item {{ text-align: center; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>PreventIA News Analytics Report</h1>
                <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>

            <div class="summary">
                <h2>Executive Summary</h2>
                <div class="stats">
                    <div class="stat-item">
                        <h3>{len(articles)}</h3>
                        <p>Total Articles</p>
                    </div>
                    <div class="stat-item">
                        <h3>{len(set(a.source.name for a in articles if a.source))}</h3>
                        <p>Sources</p>
                    </div>
                    <div class="stat-item">
                        <h3>{len(set(a.country for a in articles if a.country))}</h3>
                        <p>Countries</p>
                    </div>
                    <div class="stat-item">
                        <h3>{len(set(a.language for a in articles if a.language))}</h3>
                        <p>Languages</p>
                    </div>
                </div>
            </div>

            <h2>Article Listings</h2>
        """

        # Add article listings
        for article in articles[:50]:  # Limit to first 50 for PDF size
            html_content += f"""
            <div class="article">
                <h3>{article.title or 'Untitled'}</h3>
                <div class="metadata">
                    Source: {article.source.name if article.source else 'Unknown'} |
                    Published: {article.published_at.strftime('%Y-%m-%d') if article.published_at else 'Unknown'} |
                    Language: {article.language or 'Unknown'} |
                    Country: {article.country or 'Unknown'} |
                    Words: {article.word_count or 0}
                </div>
                <p>{article.summary or 'No summary available'}</p>
                <p><small>URL: <a href="{article.url}">{article.url}</a></small></p>
            </div>
            """

        html_content += """
            <div class="summary">
                <h2>Report Notes</h2>
                <p>This report contains the first 50 articles from your filtered dataset.</p>
                <p>For complete data analysis, please use the CSV or Excel export options.</p>
                <p>Generated by PreventIA News Analytics System</p>
            </div>
        </body>
        </html>
        """

        # Convert HTML to PDF using reportlab (simple approach)
        try:
            from reportlab.lib.pagesizes import A4, letter
            from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
            from reportlab.lib.units import inch
            from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer

            # Create PDF buffer
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            styles = getSampleStyleSheet()

            # Build PDF content
            story = []

            # Title
            title_style = ParagraphStyle(
                "CustomTitle",
                parent=styles["Heading1"],
                fontSize=20,
                textColor="#2c3e50",
                alignment=1,  # Center alignment
            )
            story.append(Paragraph("PreventIA News Analytics Report", title_style))
            story.append(Spacer(1, 12))

            # Date
            story.append(
                Paragraph(
                    f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                    styles["Normal"],
                )
            )
            story.append(Spacer(1, 20))

            # Executive Summary
            story.append(Paragraph("Executive Summary", styles["Heading2"]))
            summary_text = f"""
            <b>Total Articles:</b> {len(articles)}<br/>
            <b>Sources:</b> {len(set(a.source.name for a in articles if a.source))}<br/>
            <b>Countries:</b> {len(set(a.country for a in articles if a.country))}<br/>
            <b>Languages:</b> {len(set(a.language for a in articles if a.language))}
            """
            story.append(Paragraph(summary_text, styles["Normal"]))
            story.append(Spacer(1, 20))

            # Articles section
            story.append(Paragraph("Article Listings", styles["Heading2"]))
            story.append(Spacer(1, 12))

            for i, article in enumerate(articles[:20], 1):  # Limit to 20 for PDF size
                story.append(
                    Paragraph(f"{i}. {article.title or 'Untitled'}", styles["Heading3"])
                )

                metadata = (
                    f"Source: {article.source.name if article.source else 'Unknown'} | "
                )
                metadata += f"Published: {article.published_at.strftime('%Y-%m-%d') if article.published_at else 'Unknown'} | "
                metadata += f"Language: {article.language or 'Unknown'} | "
                metadata += f"Words: {article.word_count or 0}"

                story.append(Paragraph(metadata, styles["Normal"]))
                story.append(
                    Paragraph(
                        article.summary or "No summary available", styles["Normal"]
                    )
                )
                story.append(Spacer(1, 12))

            # Build PDF
            doc.build(story)
            pdf_content = buffer.getvalue()

        except ImportError:
            # Fallback: Generate a simple text-based PDF
            pdf_content = f"""Simple PDF Report

PreventIA News Analytics Report
Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Executive Summary:
- Total Articles: {len(articles)}
- Sources: {len(set(a.source.name for a in articles if a.source))}
- Countries: {len(set(a.country for a in articles if a.country))}
- Languages: {len(set(a.language for a in articles if a.language))}

Article Listings:
""".encode(
                "utf-8"
            )

            for i, article in enumerate(articles[:10], 1):
                article_text = f"""
{i}. {article.title or 'Untitled'}
   Source: {article.source.name if article.source else 'Unknown'}
   Published: {article.published_at.strftime('%Y-%m-%d') if article.published_at else 'Unknown'}
   Summary: {article.summary or 'No summary available'}

""".encode(
                    "utf-8"
                )
                pdf_content += article_text

        # Track export
        filename = f"news_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        track_export("PDF Report", filename, file_size=len(pdf_content))

        # Return as streaming response
        return StreamingResponse(
            io.BytesIO(pdf_content),
            media_type="application/pdf",
            headers={"Content-Disposition": f"attachment; filename={filename}"},
        )

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error generating PDF report: {str(e)}"
        )
