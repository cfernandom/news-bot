version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:16-alpine
    container_name: preventia_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-preventia_news}
      - POSTGRES_USER=${POSTGRES_USER:-preventia}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-preventia123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./services/data/database/migrations:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-preventia} -d ${POSTGRES_DB:-preventia_news}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:8-alpine
    container_name: preventia_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Analytics API - Production Configuration
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: preventia_api_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-preventia}:${POSTGRES_PASSWORD:-preventia123}@postgres:5432/${POSTGRES_DB:-preventia_news}
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_RELOAD=false
      - LOG_LEVEL=info
      - WORKERS=4
      - MAX_CONNECTIONS=20
      - CORS_ORIGINS=["https://yourdomain.com", "https://www.yourdomain.com"]
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # React Frontend Dashboard - Production Configuration
  frontend:
    build:
      context: ./preventia-dashboard
      dockerfile: Dockerfile
      target: production
    container_name: preventia_frontend_prod
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    environment:
      - NGINX_HOST=yourdomain.com
      - NGINX_PORT=80
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # News Analytics Service - Production Configuration
  analytics_service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: preventia_analytics_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-preventia}:${POSTGRES_PASSWORD:-preventia123}@postgres:5432/${POSTGRES_DB:-preventia_news}
      - REDIS_URL=redis://redis:6379/1
      - DAYS_INTERVAL=${DAYS_INTERVAL:-7}
      - WEEKLY_DAY=${WEEKLY_DAY:-1}
      - WEEKLY_TIME=${WEEKLY_TIME:-06:00}
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    image: nginx:1.27-alpine
    container_name: preventia_nginx_prod
    restart: unless-stopped
    volumes:
      - ./config/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: preventia_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: preventia_grafana_prod
    restart: unless-stopped
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

networks:
  default:
    name: preventia_network_prod
    driver: bridge
